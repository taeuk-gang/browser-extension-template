/**
 * Do not edit directly
 * Generated on Fri, 09 Jun 2023 17:35:51 GMT
 */

/**
 * @description size in rem
 */
type SizeRem = `${number}rem`;

export type SizeDesignTokens = {
  boxShadow: {
    thin: string;
    thick: string;
    thicker: string;
  };
  borderWidth: {
    thin: string;
    thick: string;
    thicker: string;
  };
  borderRadius: {
    small: string;
    medium: string;
    large: string;
    full: string;
  };
  outline: {
    focus: {
      offset: SizeRem;
      width: SizeRem;
    };
  };
  breakpoint: {
    xsmall: SizeRem;
    small: SizeRem;
    medium: SizeRem;
    large: SizeRem;
    xlarge: SizeRem;
    xxlarge: SizeRem;
  };
  control: {
    minTarget: {
      auto: SizeRem;
      fine: SizeRem;
      coarse: SizeRem;
    };
    xsmall: {
      size: SizeRem;
      lineBoxHeight: SizeRem;
      paddingBlock: string;
      paddingInline: {
        condensed: SizeRem;
        normal: SizeRem;
        spacious: SizeRem;
      };
      gap: SizeRem;
    };
    small: {
      size: SizeRem;
      lineBoxHeight: SizeRem;
      paddingBlock: string;
      paddingInline: {
        condensed: SizeRem;
        normal: SizeRem;
      };
      gap: SizeRem;
    };
    medium: {
      size: SizeRem;
      lineBoxHeight: SizeRem;
      paddingBlock: string;
      paddingInline: {
        condensed: SizeRem;
        normal: SizeRem;
        spacious: SizeRem;
      };
      gap: SizeRem;
    };
    large: {
      size: SizeRem;
      lineBoxHeight: SizeRem;
      paddingBlock: string;
      paddingInline: {
        normal: SizeRem;
        spacious: SizeRem;
      };
      gap: SizeRem;
    };
    xlarge: {
      size: SizeRem;
      lineBoxHeight: SizeRem;
      paddingBlock: string;
      paddingInline: {
        normal: SizeRem;
        spacious: SizeRem;
      };
      gap: SizeRem;
    };
  };
  controlStack: {
    small: {
      gap: {
        auto: SizeRem;
        condensed: SizeRem;
        spacious: SizeRem;
      };
    };
    medium: {
      gap: {
        auto: SizeRem;
        condensed: SizeRem;
        spacious: SizeRem;
      };
    };
    large: {
      gap: {
        auto: SizeRem;
        condensed: SizeRem;
        spacious: SizeRem;
      };
    };
  };
  stack: {
    padding: {
      condensed: SizeRem;
      normal: SizeRem;
      spacious: SizeRem;
    };
    gap: {
      condensed: SizeRem;
      normal: SizeRem;
      spacious: SizeRem;
    };
  };
  viewportRange: {
    narrow: string;
    narrowLandscape: string;
    regular: string;
    wide: string;
    portrait: string;
    landscape: string;
  };
};
